FROM cmdln/crossbuild

ARG RUST_VER
ARG OPENSSL_VER

#RUN apt update && \
#        apt upgrade -y

ENV OPENSSL_DIR /usr/local
ENV OPENSSL_STATIC=1
# executing a crossbuild image would set these correctly but building from it
# does not so have to set these in this image so that the OpenSSL build can
# succeed
ENV LD_LIBRARY_PATH /usr/x86_64-linux-gnu/x86_64-apple-darwin15/lib
ENV PATH /usr/x86_64-apple-darwin15/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# activate cross compilation
ENV PKG_CONFIG_ALLOW_CROSS 1

ADD build_openssl.sh .

RUN ./build_openssl.sh mac

ENV PATH "/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/osxcross/bin"

ADD mac-cc /usr/local/bin/
ADD mac-c++ /usr/local/bin/
ADD mac-cargo /usr/local/bin/

# ensures that the host and target compilers are explicitly set, including using
# wrappers for clang for the target to pass parameters to clang that help a lot
# of native code more reliably compile
ENV HOST_CC gcc
ENV HOST_CXX g++
ENV CC mac-cc
ENV CXX mac-c++
ENV CPP="mac-cc -E"
# these, along with the .cargo/config in mac-cargo, help resolve issues that can
# arise with assembly and linking
ENV AR "/usr/osxcross/bin/x86_64-apple-darwin15-ar"
ENV RANLIB "/usr/osxcross/bin/x86_64-apple-darwin15-ranlib"
ENV TOOLCHAIN_PREFIX "/usr/osxcross/bin/x86_64-apple-darwin15-"

RUN curl https://sh.rustup.rs -sSf -o rustup.sh && \
        sh ./rustup.sh -y && \
        rustup default $RUST_VER && \
        rustup target add x86_64-apple-darwin && \
        rm rustup.sh

CMD ["mac-cargo", "build", "--release"]
